1.Cli

new Angular app using Angular CLI
ng new my-app
cd my-app

basic Angular component
ng generate component my-component

Modify the app.component.ts f to include NgModules and Template Syntax

2. Ng Modules

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule } from '@angular/forms';
import { AppComponent } from './app.component';
import { MyComponentComponent } from './my-component/my-component.component';

@NgModule({
 declarations: [AppComponent, MyComponentComponent],
 imports: [BrowserModule, FormsModule],
  bootstrap: [AppComponent],
})
export class AppModule {}

3.Components


  <h1> write titile.. </h1>

  <my-component></my-component>

  <button (click)="onButtonClick()">Click me</button>

  <input [(ngModel)]="name" />

  {{ birthday | date }}
  <div *ngIf="isVisible">Visible</div>
  <input #myInput />
</div>

<p> {{ 'content here }} </p>
<ul>
  <li *ngFor="let item of items">{{ item here }}</li>


<div [ngClass]="{ 'highlight': isHighlighted }">
Conditional 
</div>

<input (keyup.enter)="onEnterKey($event)" />



4.

app component

import { Component, EventEmitter, Input, Output } from '@angular/core';

@Component({
  selector: 'app-root',
  template: `
    
6. Component Interaction Demo

    a) Structural Binding 

    <app-child [inputProperty]="parentProperty"></app-child>

    b) Event Emitters 

    <app-child (childEvent)="handleChildEvent($event)"></app-child>

    c) ngModel Two-Way Binding 

    <input [(ngModel)]="property" placeholder="Enter text" />

    d) ngIf Directive 

    <div *ngIf="condition">Content to show</div>

    e) ngFor Directive 
    <div *ngFor="let item of items">{{ item }}</div>

   6. ngSwitch Directive 

    <div [ngSwitch]="value">
      <div *ngSwitchCase="'case1'">Content for case 1</div>
      <div *ngSwitchCase="'case2'">Content for case 2</div>
      <div *ngSwitchDefault>Default content</div>
    </div>

    a) Attribute Binding 
    <div [attr.data-custom]="value"></div>

    b)Class Binding 
    <div [class.active]="isActive"></div>

    c) Style Binding

    <div [style.color]="isRed ? 'red' : 'blue'"></div>
  `,
})

export class AppComponent {
  parentProperty: string = 'Parent Value';
  property: string = '';

 condition: boolean = true;
 items: string[] = ['Item 1', 'Item 2', 'Item 3'];
  value: string = 'case1';
  isActive: boolean = true;

  handleChildEvent(event: any) {
    ( Handle child event here)
  }
}

8. Services and Obstacles


 (Import necessary Angular modules and services)

import { Injectable, Component } from '@angular/core';
import { Observable, Subscription } from 'rxjs';

( Define a service with a method to fetch data)

@Injectable({
  providedIn: 'root',
})
export class DataService {
  getData(): Observable<string[]> {
    
(Simulate fetching data)

    const data: string[] = ['Item 1', 'Item 2', 'Item 3'];
    return new Observable((observer) => {
      observer.next(data);
      observer.complete();
    });
  }
}



export class AppComponent {
  items$: Observable<string[]>;
  subscription: Subscription;

  constructor(private dataService: DataService) // dependency injection
 {

  (Creating and subscribing to an observable)

    this.items$ = this.dataService.getData();

    this.subscription = this.items$.subscribe((data) => {
      
(Executing observable data)

      console.log('Received data:', data);
    });
  }

  ngOnDestroy() {
    
(Disposing observable subscription)

    this.subscription.unsubscribe();
  }
}





Routing 


1. RouterModule:
   - Angular applications use RouterModule to configure the routes. It's typically imported from @angular/router.
   - Example:
     
     import { RouterModule, Routes } from '@angular/router';

     const routes: Routes = [
       // Define your routes here
     ];

     @NgModule({
       imports: [RouterModule.forRoot(routes)],
       exports: [RouterModule]
     })
     export class AppRoutingModule { }
     

2. Router Parameters:
   - It can pass parameters in the URL to navigate to a specific route with dynamic data.
   - Example:
     
     // In your route configuration
     { path: 'details/:id', component: DetailsComponent }

     // In your component
     this.router.navigate(['/details', 123]);
     

3. Configuring Router (Nested Router):
   - Angular supports nested routing, allowing you to have child routes within a parent route.
   - Example:
     
     // Parent route with child routes
     { path: 'dashboard', component: DashboardComponent, children: [
       { path: 'overview', component: OverviewComponent },
       { path: 'settings', component: SettingsComponent }
     ]}
     

4. Router Outlet:
   - The <router-outlet> directive is used to define the location where the component for the activated route should be displayed.
   - Example in HTML:
     html
     <router-outlet></router-outlet>
     

5. Relative Router:
   - You can use relative paths for navigation, making it easier to navigate based on the current route.
   - Example:
     
     // Navigating relative to the current route
     this.router.navigate(['../new'], { relativeTo: this.route });
     

6. Router Link:
   - The routerLink directive is used in templates to create navigation links.
   - Example:
     html
     (Navigate to the 'dashboard' route)

     <a routerLink="/dashboard">Dashboard</a>
     

7. Lazy Loading:
   - Lazy loading allows you to load modules and their associated components only when they are requested.
   - Example:
     
     // Lazy loading a module
     { path: 'admin', loadChildren: () => import('./admin/admin.module').then(m => m.AdminModule) }
     

8. Route Guards:
   - Route guards are used to control the navigation either by allowing or denying access to a route.
   - Example:
     
     canActivate: [AuthGuard]


Reactive Form 

1. Reactive Forms Module:
   Angular Reactive Forms are part of the @angular/forms module. To use reactive forms, 
you need to import the ReactiveFormsModule in your Angular module.

   
    Import ReactiveFormsModule in your Angular module
   import { ReactiveFormsModule } from '@angular/forms';

   @NgModule({
     imports: [
       ReactiveFormsModule,
        other modules
     ],
      other configurations
   })
   export class YourModule { }
   

2. FormGroup and FormControl:
   Reactive Forms use FormGroup to represent a form, and FormControl to represent an individual form control (like an input field).

   
    Create a FormGroup with FormControls
   const myForm: FormGroup = new FormGroup({
     'username': new FormControl('', Validators.required),
     'email': new FormControl('', [Validators.required, Validators.email]),
   });
   

3. Setting Values with setValue:
   The setValue method allows you to set values for the form controls programmatically.

   
    Set values for the form controls
   myForm.setValue({
     'username': 'exampleUser',
     'email': 'user@example.com',
   });
   

4. Accessing Form Control Values:
   You can retrieve the values of form controls using the value property.

   
   const usernameValue = myForm.get('username')?.value;
   const emailValue = myForm.get('email')?.value;
   

5. Angular Service:
   Angular services are used for organizing and sharing code across components. Here's a simple example:

   
    Create a service with the Angular CLI: ng generate service my-data
   @Injectable({
     providedIn: 'root',
   })
   export class MyDataService {
      Your service logic here
   }
   

6. Reactive Form Validation:
   Apply validation to form controls and provide user feedback.

   html
   -- In your component template -
   <div [ngClass]="{'is-invalid': myForm.get('username')?.invalid && myForm.get('username')?.touched}">
     <label for="username">Username</label>
     <input type="text" id="username" formControlName="username">
     <div ngIf="myForm.get('username')?.hasError('required') && myForm.get('username')?.touched">
       Username is required.
     </div>
   </div>